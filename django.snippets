# Model Fields

# Note: Optional arguments are using defaults that match what Django will use
# as a default, e.g. with max_length fields.  Doing this as a form of self
# documentation and to make it easy to know whether you should override the
# default or not.

# Note: Optional arguments that are booleans will use the opposite since you
# can either not specify them, or override them, e.g. auto_now_add=False.

snippet auto
	${1:FIELDNAME} = models.AutoField()
snippet bool
	${1:FIELDNAME} = models.BooleanField(
		_('${2:$1}'),
		default=${3:True},
	)
snippet char
	${1:FIELDNAME} = models.CharField(
		_('${2:$1}'),
		max_length=${3:100},
		blank=True
	)
snippet comma
	${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${3:, blank=True})
snippet date
	${1:FIELDNAME} = models.DateField(
		_('${2:$1}'),
		${3:auto_now_add=True,
		auto_now=True},
		blank=True,
		null=True
	)
snippet datetime
	${1:FIELDNAME} = models.DateTimeField(
	_('${2:$1}'),
		${3:auto_now_add=True,
		auto_now=True},
		blank=True,
		null=True
	)
snippet decimal
	${1:FIELDNAME} = models.DecimalField(
		_('${2:$1}'),
		max_digits=${3},
		decimal_places=${4},
		blank=True,
		null=True
	)
snippet email
	${1:email} = models.EmailField(_('${2:$1}'), max_length=${3:75}${4:, blank=True})
snippet file
	${1:FIELDNAME} = models.FileField(
		upload_to=${2:path/for/upload},
		verbose_name=_('${3:$1}'),
		blank=True
	)
snippet filepath
	${1:FIELDNAME} = models.FilePathField(_('${2:$1}'), path=${3:"/abs/path/to/dir"}${4:, max_length=100}${5:, match="*.ext"}${6:, recursive=True}${7:, blank=True, })
snippet float
	${1:FIELDNAME} = models.FloatField(_('${2:$1}'))
snippet image
	${1:FIELDNAME} = models.ImageField(
		upload_to=${2:path/for/upload},
		verbose_name=_('${3:$1}'),
		blank=True
	)
snippet int
	${1:FIELDNAME} = models.IntegerField(_('${2:$1}'))
snippet ip
	${1:FIELDNAME} = models.IPAddressField(_('${2:$1}'))
snippet nullbool
	${1:FIELDNAME} = models.NullBooleanField(_('${2:$1}'))
snippet posint
	${1:FIELDNAME} = models.PositiveIntegerField(_('${2:$1}'))
snippet possmallint
	${1:FIELDNAME} = models.PositiveSmallIntegerField(_('${2:$1}'))
snippet slug
	${1:FIELDNAME} = models.SlugField(max_length=${2:50}${3:, blank=True})
snippet smallint
	${1:FIELDNAME} = models.SmallIntegerField(_('${2:$1}'))
snippet text
	${1:FIELDNAME} = models.TextField(
		_('${2:$1}'),
		blank=True
	)
snippet time
	${1:FIELDNAME} = models.TimeField(_('${2:$1}'), ${3:auto_now_add=True, auto_now=True}${4:, blank=True, null=True})
snippet url
	${1:FIELDNAME} = models.URLField(_('${2:$1}'), ${3:verify_exists=False}${4:, max_length=200}${5:, blank=True})
snippet xml
	${1:FIELDNAME} = models.XMLField(_('${2:$1}'), schema_path=${3:None}${4:, blank=True})
# Relational Fields
snippet fk
	${1:FIELDNAME} = models.ForeignKey(
		${2:OtherModel},
		verbose_name=_('${3:$1}'),
		${4:, related_name=''}${5:, limit_choices_to=}${6:, to_field=''}
	)
snippet m2m
	${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}, verbose_name=_('${3:$1}')${4:, related_name=''}${5:, limit_choices_to=}${6:, symmetrical=False}${7:, through=''}${8:, db_table=''})
snippet o2o
	${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}, verbose_name=_('${3:$1}')${4:, parent_link=True}${5:, related_name=''}${6:, limit_choices_to=}${7:, to_field=''})

# i18n snippets
snippet importugettext
	from django.utils.translation import ugettext_lazy as _
snippet _
	_('${1:}')
snippet importreverse
	from django.core.urlresolvers import reverse
snippet reverse
	reverse('${1:viewname}'${2:, args=[]}${3:, kwargs={}})
	
# Code Skeletons

snippet form
	class ${1:FormName}(forms.Form):
		"""${2:docstring}"""
		${3}

snippet model
	class ${1:ModelName}(models.Model):
		"""${2:docstring}"""
		${3:#model fields}
	
		class Meta:
			verbose_name = _('${4:$1}')
			verbose_name_plural = _('${5:$1s}')
			ordering = [${6}]
	
		def __unicode__(self):
			${7:return "$1"}
	
		@models.permalink
		def get_absolute_url(self):
			return ('${8:view_or_url_name}'${9:, [str(self.id)]})

snippet modeladmin
	class ${1:ModelName}Admin(admin.ModelAdmin):
		${2}
	
	admin.site.register($1, $1Admin)
	
snippet r2r
	return render_to_response('${1:template.html}', {
			${2}
		}${3:, context_instance=RequestContext(request)}
	)

snippet tabularinline
	class ${1:ModelName}Inline(admin.TabularInline):
		model = $1
		extra = ${2:3}

snippet stackedinline
	class ${1:ModelName}Inline(admin.StackedInline):
		model = $1
		extra = ${2:3}

# imports
snippet iset
	from django.conf import settings

# my
snippet browser
	from impckg.utils.test.browser import display; display(response.content)
